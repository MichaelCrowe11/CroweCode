name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Pre-deployment checks
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check deployment conditions
        id: check
        run: |
          # Check if all CI checks passed
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          
      - name: Notify deployment start
        if: steps.check.outputs.should_deploy == 'true'
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "🚀 Deployment started for Crowe Logic Platform",
              "attachments": [{
                "color": "warning",
                "fields": [
                  {"title": "Environment", "value": "${{ github.event.inputs.environment || 'production' }}", "short": true},
                  {"title": "Branch", "value": "${{ github.ref_name }}", "short": true},
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                  {"title": "Actor", "value": "${{ github.actor }}", "short": true}
                ]
              }]
            }'

  # Database migrations
  migrate-database:
    name: Database Migrations
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          npx prisma migrate deploy
          npx prisma generate
          
      - name: Verify database schema
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: npx prisma db pull --print

  # Deploy to Vercel
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [pre-deploy, migrate-database]
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://croweos.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Vercel CLI
        run: npm install -g vercel
        
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Deploy to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment || 'production' }}',
              required_contexts: [],
              auto_merge: false
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.deployment_url }}',
              description: 'Deployment successful'
            });

  # Deploy Docker containers
  deploy-docker:
    name: Deploy Docker Services
    runs-on: ubuntu-latest
    needs: [pre-deploy, migrate-database]
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.PRODUCTION_HOST }} ssh-rsa ${{ secrets.PRODUCTION_HOST_KEY }}" > ~/.ssh/known_hosts
          
      - name: Deploy Docker Compose
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/crowe-platform
            git pull origin main
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker system prune -f
          EOF

  # Smoke tests
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-vercel, deploy-docker]
    steps:
      - uses: actions/checkout@v4
      
      - name: Wait for deployment
        run: sleep 30
        
      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://croweos.com/api/health)
          if [ $response -ne 200 ]; then
            echo "Health check failed with status $response"
            exit 1
          fi
          
      - name: API smoke tests
        run: |
          # Test main endpoints
          endpoints=(
            "/"
            "/api/health"
            "/api/ai"
            "/agriculture"
            "/ml-lab"
            "/substrate"
          )
          
          for endpoint in "${endpoints[@]}"; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "https://croweos.com$endpoint")
            echo "Endpoint $endpoint returned status $response"
            if [ $response -ge 500 ]; then
              echo "Endpoint $endpoint failed with status $response"
              exit 1
            fi
          done
          
      - name: Run Playwright smoke tests
        run: |
          npm ci
          npx playwright install chromium
          npm run test:smoke

  # Rollback on failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: failure()
    steps:
      - name: Rollback Vercel deployment
        run: |
          vercel rollback --token=${{ secrets.VERCEL_TOKEN }}
          
      - name: Rollback database
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          # This would run rollback migrations
          echo "Rolling back database migrations..."
          
      - name: Notify rollback
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "⚠️ Deployment rolled back for Crowe Logic Platform",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "Environment", "value": "${{ github.event.inputs.environment || 'production' }}", "short": true},
                  {"title": "Reason", "value": "Smoke tests failed", "short": true}
                ]
              }]
            }'

  # Post-deployment tasks
  post-deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: success()
    steps:
      - uses: actions/checkout@v4
      
      - name: Clear CDN cache
        run: |
          # Clear Cloudflare or other CDN cache
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"purge_everything":true}'
          
      - name: Warm up cache
        run: |
          # Pre-fetch critical pages
          urls=(
            "https://croweos.com/"
            "https://croweos.com/api/health"
            "https://croweos.com/agriculture"
          )
          
          for url in "${urls[@]}"; do
            curl -s "$url" > /dev/null
          done
          
      - name: Update status page
        run: |
          # Update status page or monitoring dashboard
          echo "Updating status page..."
          
      - name: Create release notes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: context.payload.before,
              head: context.sha
            });
            
            const releaseNotes = commits.commits
              .map(c => `- ${c.commit.message} (${c.sha.substring(0, 7)})`)
              .join('\n');
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${new Date().toISOString().split('T')[0]}`,
              name: `Production Release ${new Date().toISOString().split('T')[0]}`,
              body: releaseNotes,
              draft: false,
              prerelease: false
            });
          
      - name: Notify deployment success
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "✅ Deployment successful for Crowe Logic Platform",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Environment", "value": "${{ github.event.inputs.environment || 'production' }}", "short": true},
                  {"title": "Version", "value": "${{ github.sha }}", "short": true},
                  {"title": "URL", "value": "https://croweos.com", "short": true},
                  {"title": "Duration", "value": "${{ github.run_number }} minutes", "short": true}
                ]
              }]
            }'
          
      - name: Send deployment metrics
        run: |
          # Send deployment metrics to DataDog or monitoring service
          echo "Sending deployment metrics..."
